spring.application.name=gateway
server.port=8082

springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true

springdoc.swagger-ui.path=/doc/swagger-ui.html

springdoc.pathsToMatch=/userKeycloak/**, /account/**

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/dh-money
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs
spring.security.oauth2.client.registration.api-gateway-service.provider=api-gateway-service
spring.security.oauth2.client.registration.api-gateway-service.client-id=api-gateway-client
spring.security.oauth2.client.registration.api-gateway-service.client-secret=NTo880HxBdJk2Vil15vRTYwf6JbL1AOB
spring.security.oauth2.client.registration.api-gateway-service.scope=openid
spring.security.oauth2.client.registration.api-gateway-service.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.api-gateway-service.redirect-uri=

# Esta anotacion sirve para configurar el filtro TokenRelay, que es el filtro que se encarga de validar el token de acceso de la peticio?n HTTP.
spring.cloud.gateway.default-filters[0]=TokenRelay


logging.level.org.springframework.security=DEBUG

#eureka
eureka.instance.status-page-url-path= http://localhost:${server.port}/actuator/info
eureka.instance.health-check-url-path=http://localhost:${server.port}/actuator/health

#actuator
management.endpoints.web.exposure.include=health, info
management.info.env.enabled=true
info.app.name = "gateway"
info.app.description = gateway

# configuración de base de datos

spring.cloud.config.discovery.enabled=true
spring.cloud.config.discovery.service-id=config-server
spring.cloud.gateway.discovery.locator.enabled=true
spring.config.import=optional:configserver:
eureka.instance.hostname=localhost

# routing
spring.cloud.gateway.routes[0].id=auth-server
spring.cloud.gateway.routes[0].uri=http://localhost:8081
spring.cloud.gateway.routes[0].predicates[0]=Path=/auth-server